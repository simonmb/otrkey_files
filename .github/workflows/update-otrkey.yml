name: Update otrkey files every 30 min

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

permissions:
  contents: write

jobs:
  clean_and_update_csv:
    runs-on: ubuntu-latest
    env:
      API_KEY: ${{ secrets.API_KEY }}

    steps:
      - name: Checkout full repo history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false  # we'll set our own remote with PAT

      - name: Configure Git author
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install runtime deps
        run: |
          pip install requests

      - name: Install git-filter-repo
        run: |
          curl -sSL https://cdn.jsdelivr.net/gh/newren/git-filter-repo/git-filter-repo > /usr/local/bin/git-filter-repo
          chmod +x /usr/local/bin/git-filter-repo

      - name: Run OTRKey fetch script (write to temp)
        run: |
          python download_otrkey_files.py
          # Save new CSV and create zip version
          cp otrkey_files.csv /tmp/otrkey_files.new.csv
          zip -j /tmp/otrkey_files.zip otrkey_files.csv

      - name: Remove ALL history of otrkey_files.csv (keep code history)
        run: |
          git-filter-repo --force --path otrkey_files.csv --path otrkey_files.zip --invert-paths

      - name: Restore fresh CSV and commit
        run: |
          cp /tmp/otrkey_files.new.csv otrkey_files.csv
          cp /tmp/otrkey_files.zip otrkey_files.zip
          git add otrkey_files.csv otrkey_files.zip
          git commit -m "⬇️ Update otrkey_files" || echo "No changes to commit."

      - name: Push rewritten history
        env:
          REPO: ${{ github.repository }}
          PAT: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          URL="https://x-access-token:${PAT}@github.com/${REPO}.git"
          if git remote | grep -q '^origin$'; then
            git remote set-url origin "$URL"
          else
            git remote add origin "$URL"
          fi
          # Push to the current branch (works on main or others)
          CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          git push --force --no-tags origin "HEAD:${CURRENT_BRANCH}"
      - name: Purge jsDelivr cache
        uses: gacts/purge-jsdelivr-cache@v1
        with:
          url: |
            https://cdn.jsdelivr.net/gh/simonmb/otrkey_files@main/otrkey_files.zip
